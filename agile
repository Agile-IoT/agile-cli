#!/bin/bash

realpath . &>/dev/null || realpath() {
    P=$1
    while readlink $P >/dev/null; do P=`readlink $P`; done
    [[ $P = /* ]] && echo "$P" || echo "$PWD/${P#./}"
}
BINDIR=$(dirname $(realpath $0))
[ -r "$BINDIR/agile.config" ] && . "$BINDIR/agile.config"
COMPOSE="docker-compose -f $AGILE_STACK/docker-compose.yml"

is_service_up (){
  [ $(curl -sL -w "%{http_code}\\n" "$1" -o /dev/null) -eq "$2" ]
}

wait_for_service (){
  while ! is_service_up $1 $2  ; do
    echo "Waiting for $1"
    sleep 1
  done
}

#export COMPOSE_HTTP_TIMEOUT=300

case "$1" in
  start)
    $COMPOSE up -d agile-core
    $COMPOSE up -d agile-ble
    wait_for_service "http://$AGILE_HOST:8080" 404
    $COMPOSE up -d agile-ui
    wait_for_service "http://$AGILE_HOST:2000" 200
    $COMPOSE up -d agile-osjs
    wait_for_service "http://$AGILE_HOST:8000" 200
    $COMPOSE up -d agile-nodered
    wait_for_service "http://$AGILE_HOST:1880" 200
    $COMPOSE up -d agile-zb
    sleep 3
    $COMPOSE up -d agile-zb-lamp
    $COMPOSE up -d
    ;;
  stop)
    $COMPOSE stop
    ;;
  clean)
    $COMPOSE down
    ;;
  restart)
    $0 stop
    sleep 1
    $0 start
    ;;
  update)
    $COMPOSE pull
    ;;
  zb-start)
    $COMPOSE up -d agile-zb
    sleep 3
    $COMPOSE up -d agile-zb-lamp
    ;;
  zb-stop)
    $COMPOSE stop agile-zb-lamp agile-zb
    ;;
  compose)
    shift
    $COMPOSE "$@"
    ;;
  docker)
    shift
    docker "$@"
    ;;
  install)
    ln -s $BINDIR/agile /usr/local/bin/
    ;;
  tag)
    shift
    TAG=$1
    for IMAGE in `grep image: $BINDIR/docker-compose.yml | sed s/image://` ; do
      rsh docker tag $IMAGE ${IMAGE/:*/}:$TAG
    done
    ;;
  tag-push)
    shift
    TAG=$1
    for IMAGE in `grep image: $BINDIR/docker-compose.yml | sed s/image://` ; do
      rsh docker tag $IMAGE ${IMAGE/:*/}:$TAG
      rsh docker push ${IMAGE/:*/}:$TAG
    done
    ;;
  push)
    $COMPOSE push
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|clean|update|compose|install}
         install: create symbolic link in /usr/local/bin
         start: start all AGILE components
         stop: stop all AGILE components
         restart: stop and then start
         clean: stop and remove all containers. AGILE persistent state will remain, but docker containers will be reinitialized
         update: download newest version of docker containers
         compose: use docker-compose commands for fine-grained control (e.g. agile compose logs)
         docker: use docker commands for fine-grained control (e.g. agile docker ps)
         tag <newtag>: tag all images with newtag
         push: push all images on dockerhub
         tag-push <newtag>: tag and push tagged images
    "
    exit 1
    ;;
esac
